name: mdci-per-patch
# tested with v1 vagrant snapshot...

on:
  pull_request:

env:
    JOB_OUT: "output.txt"
    REPO_DIR: "host/md-ci-linux"
    
jobs:
  per-patch-testing:
    if: ${{ github.repository == 'md-raid-utilities/md-ci-linux' }}
    runs-on: self-hosted
    steps:
      - name: VM startup from snapshot
        id: kver1
        run: |
          echo "Current working directory: ${{ github.workspace }}"
          cd ..
          echo "***************************"
          echo "Restoring clean VM image..."
          echo "***************************"
          echo "Let's check the current user and which runner is execiting:"
          whoami
          ls run*
          vagrant snapshot restore clean_vm_v1
          echo "FYI vagrant restore command finished with exit code: $?"
          sleep 2
          vagrant status
          vagrant up
          sleep 2
          vagrant ssh -c "sudo timedatectl set-timezone UTC && \
            sudo systemctl restart chronyd && sudo chronyc -a makestep && sleep 1"
          echo "FYI vagrant time command finished with exit code: $?" 
          vagrant ssh -c "echo 'Fresh VM, hello world!' && date && uname -r && \
            gcc --version && sudo grubby --info ALL"
          echo "FYI vagrant fresh command finished with exit code: $?" 
          echo "kver=$(vagrant ssh -c 'uname -r')" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
      - name: Get user's e-mail
        run: |
          # echo "USER_EMAIL=$(git log -n 1 --pretty=format:%ae)" >> $GITHUB_ENV
          # temp override the aboe during testing
          echo "USER_EMAIL=paul.e.luse@intel.com" >> $GITHUB_ENV
          # start the output file
          echo "PULL REQUEST INFO:" > $JOB_OUT
          echo "Author: ${{ github.event.pull_request.user.login }}" >> $JOB_OUT
          echo "Title: ${{ github.event.pull_request.title }}" >> $JOB_OUT
          echo "Body: ${{ github.event.pull_request.body }}" >> $JOB_OUT
          cat "${{ env.JOB_OUT }}"
          # for now add the sender email to the SUBJECT as I'm sending to myself while debugging
          echo "SUBJECT=Github Actions job FAILURE for $(git log -n 1 --pretty=format:%ae)" >> $GITHUB_ENV
      - name: Configure kernel
        run: |
          cp ../config.sh .
          cd ..
          echo "********************************"
          echo "Prepare minimal kernel config..."
          echo "********************************"
          vagrant status
          vagrant up
          echo "FYI vagrant up command finished with exit code: $?"
          sleep 2
          vagrant ssh -c "cd ${{ env.REPO_DIR }} && ./config.sh"
          echo "FYI vagrant config command finished with exit code: $?" 
      - name: Build kernel
        run: |
          echo "******************************"
          echo "Compile Linux on bare metal..."
          echo "******************************"
          make bzImage -j20
          make modules -j20
      - name: Install kernel
        run: |
          cd ..
          echo "***********************"
          echo "Install kernel in VM..."
          echo "***********************"
          vagrant status
          vagrant up
          echo "FYI vagrant up command finished with exit code: $?"
          sleep 2
          # remove old kernel index 0 so new build will always be used
          vagrant ssh -c "sudo grubby --remove-kernel=0" 
          echo "FYI vagrant grubby command finished with exit code: $?" 
          vagrant ssh -c "cd ${{ env.REPO_DIR }} && sudo make modules_install -j20 && \
            sudo make install -j20 && sudo grubby --info ALL && exit"
          echo "FYI vagrant make command finished with exit code: $?" 
      - name: Reboot VM
        id: kver2
        run: |
          cd ..
          echo "***************"
          echo "Rebooting VM..."
          echo "***************"
          vagrant status
          vagrant halt
          echo "FYI vagrant halt command finished with exit code: $?"
          sleep 2
          vagrant status
          sleep 2
          vagrant up
          echo "FYI vagrant up command finished with exit code: $?"
          sleep 2
          vagrant status
          echo "kver=$(vagrant ssh -c 'uname -r')" >> $GITHUB_OUTPUT
      - name: VM version check
        run: |
          echo "*********************************"
          echo 'Reboot done, check kernel version'
          echo "*********************************"
          echo "before---> ${{steps.kver1.outputs.kver}}"
          echo "after----> ${{steps.kver2.outputs.kver}}"
          if [[ "${{steps.kver1.outputs.kver}}" != "${{steps.kver2.outputs.kver}}" ]]; then
            echo "Version check passed!"
          else
            echo "Kernel install failed"
          fi
          vagrant status
          echo "FYI vagrant up command finished with exit code: $?"
          sleep 2
          vagrant ssh -c "echo 'Reboot done, hello world!' && uname -r"
          echo "FYI vagrant reboot done command finished with exit code: $?" 
      - name: Execute tests
        run: |
          echo "Under construction..."
      - name: All done, cleanup
        run: |          
          cd ..
          echo "Cleaning up..."
          # TODO: add testing cleanup
          vagrant halt
          echo "FYI vagrant halt command finished with exit code: $?"
